# -*- coding: utf-8 -*-
"""2_split_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oD6C5RVOUk2ljkMec2UK15YybJ1xzOs3
"""



# -*- coding: utf-8 -*-
import pandas as pd
from sklearn.model_selection import train_test_split
import os
import logging
import config

# --- Logging Setup ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s : %(levelname)s : %(message)s')

def main():
    """Loads labeled data, cleans it, and splits it into train, validation, and test sets."""
    print("--- Starting Data Splitting Script ---")

    if not os.path.exists(config.LABELED_DATA_CSV):
        raise FileNotFoundError(f"Input file '{config.LABELED_DATA_CSV}' not found. Please check config.py.")

    logging.info(f"Loading labeled data from: {config.LABELED_DATA_CSV}")
    try:
        df = pd.read_csv(config.LABELED_DATA_CSV)
        logging.info(f"Read {len(df)} rows.")

        # --- Data Check & Cleaning ---
        if config.LABEL_COLUMN not in df.columns or config.TEXT_COLUMN not in df.columns:
            raise ValueError(f"Required columns not found. Check CSV and config.py. Available: {df.columns.tolist()}")

        initial_rows = len(df)
        df.dropna(subset=[config.TEXT_COLUMN, config.LABEL_COLUMN], inplace=True)
        df[config.LABEL_COLUMN] = df[config.LABEL_COLUMN].astype(str).str.strip().str.capitalize()
        df = df[df[config.LABEL_COLUMN].isin(['Positive', 'Negative', 'Neutral'])]
        df[config.TEXT_COLUMN] = df[config.TEXT_COLUMN].astype(str).fillna('')

        if len(df) < initial_rows:
            logging.info(f"Dropped {initial_rows - len(df)} rows with missing/invalid labels or text.")

        if len(df) < 10 or df[config.LABEL_COLUMN].nunique() < 2:
            raise ValueError("Not enough data or distinct valid labels remaining to perform a stratified split.")

        logging.info(f"Data distribution BEFORE split:\n{df[config.LABEL_COLUMN].value_counts(normalize=True)}")

        # --- Splitting Data ---
        logging.info("Splitting data...")
        train_val_size = 1.0 - config.TEST_SET_SIZE
        df_train_val, df_test = train_test_split(
            df,
            test_size=config.TEST_SET_SIZE,
            random_state=42,
            stratify=df[config.LABEL_COLUMN]
        )

        relative_val_size = config.VALIDATION_SET_SIZE / train_val_size
        df_train, df_validation = train_test_split(
            df_train_val,
            test_size=relative_val_size,
            random_state=42,
            stratify=df_train_val[config.LABEL_COLUMN]
        )

        logging.info(f"Training set: {len(df_train)} rows")
        logging.info(f"Validation set: {len(df_validation)} rows")
        logging.info(f"Test set: {len(df_test)} rows")

        # --- Save the Sets ---
        logging.info("Saving datasets...")
        df_train.to_csv(config.TRAIN_SET_CSV, index=False, encoding='utf-8')
        df_validation.to_csv(config.VALIDATION_SET_CSV, index=False, encoding='utf-8')
        df_test.to_csv(config.TEST_SET_CSV, index=False, encoding='utf-8')
        logging.info(f"Sets saved to {config.TRAIN_SET_CSV}, {config.VALIDATION_SET_CSV}, {config.TEST_SET_CSV}")
        print("--- SUCCESS: Data splitting complete. ---")

    except Exception as e:
        logging.error("Data Splitting Script failed", exc_info=True)
        raise e

if __name__ == "__main__":
    main()