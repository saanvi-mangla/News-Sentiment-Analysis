# -*- coding: utf-8 -*-
"""main_interactive_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oD6C5RVOUk2ljkMec2UK15YybJ1xzOs3
"""



# -*- coding: utf-8 -*-
import re
from sentiment_analyzer import load_sentiment_model_and_tokenizer, predict_sentiment
from llm_services import configure_llm, get_summary, get_qna_answer
import config

def display_article_metadata(article_data_dict):
    """Prints formatted metadata of the current article."""
    print("\n--- Article Metadata ---")
    print(f"Headline: {article_data_dict.get('headline', 'N/A')}")
    print(f"Source: {article_data_dict.get('source', 'N/A')}")
    print(f"Publication Date: {article_data_dict.get('publication_date', 'Not Available')}")
    print("------------------------")

def get_article_from_user():
    """Prompts the user to enter a new article and processes it."""
    print("\n" + "-"*30)
    input_headline = input("Enter the news headline (or press Enter if none):\n")
    input_article_text = input("Paste the full Punjabi news article text here:\n")

    if not input_article_text.strip():
        print("No article text provided. Please try again.")
        return None

    # Extract publication date from headline if present
    extracted_date = "Not Available"
    date_pattern = r'(?:Published At|Updated At):\s*([A-Z]+\s+\d{1,2},\s+\d{4}\s+\d{1,2}:\d{2}\s+(?:AM|PM)\s+\(IST\))'
    date_match = re.search(date_pattern, input_headline)
    if date_match:
        extracted_date = date_match.group(1).strip()

    return {
        'headline': input_headline.strip() or "N/A",
        'article_text': input_article_text.strip(),
        'source': "User Provided Input",
        'publication_date': extracted_date
    }

def main():
    """The main interactive loop for the news analysis system."""
    print("--- Punjabi News Interactive Analysis System ---")

    # Load local sentiment model
    sentiment_model, sentiment_tokenizer = load_sentiment_model_and_tokenizer()

    # Configure LLM Provider
    llm_available = configure_llm()
    if not llm_available:
        print("Warning: LLM services (Summarization, Q&A) are unavailable. Check your API key in config.py.")

    # Get initial article
    current_article_data = get_article_from_user()
    if not current_article_data:
        print("Exiting application.")
        return

    while True:
        print("\nWhat would you like to do?")
        print("1. Get Sentiment (Positive/Negative/Neutral)")
        print("2. Get Summarization")
        print("3. Show Publication Info")
        print("4. Ask a Question about this article")
        print("5. Enter a new article")
        print("0. Exit")

        choice = input("Enter your choice (0-5): ").strip()

        if choice == '1':
            sentiment = predict_sentiment(current_article_data['headline'], sentiment_model, sentiment_tokenizer)
            print(f"\n>>> Predicted Sentiment: {sentiment}")
        elif choice == '2' and llm_available:
            summary = get_summary(current_article_data['article_text'])
            print(f"\n>>> Summary:\n{summary}")
        elif choice == '3':
            display_article_metadata(current_article_data)
        elif choice == '4' and llm_available:
            question = input("What is your question about this article (in Punjabi)?\n")
            if question.strip():
                answer = get_qna_answer(current_article_data['article_text'], question)
                print(f"\n>>> Answer:\n{answer}")
            else:
                print("No question asked.")
        elif choice in ['2', '4'] and not llm_available:
             print("This feature is unavailable. Please check your Gemini API key in config.py.")
        elif choice == '5':
            new_article = get_article_from_user()
            if new_article:
                current_article_data = new_article
                print("New article loaded.")
        elif choice == '0':
            print("Exiting system. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

        input("\nPress Enter to continue...")

if __name__ == '__main__':
    main()