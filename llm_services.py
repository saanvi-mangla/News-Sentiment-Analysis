# -*- coding: utf-8 -*-
"""llm_services.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oD6C5RVOUk2ljkMec2UK15YybJ1xzOs3
"""



# -*- coding: utf-8 -*-
import google.generativeai as genai
import config
import logging

def configure_llm():
    """Configures the Generative AI model with the API key."""
    if not config.GOOGLE_API_KEY or config.GOOGLE_API_KEY == "PASTE_YOUR_GOOGLE_API_KEY_HERE":
        logging.warning("Google API key is missing in config.py. LLM features will be unavailable.")
        return False
    try:
        genai.configure(api_key=config.GOOGLE_API_KEY)
        return True
    except Exception as e:
        logging.error(f"Failed to configure Gemini API: {e}")
        return False

def get_summary(article_text):
    """Generates a summary for the article text using Gemini."""
    logging.info(f"Requesting summary from Gemini for text: '{article_text[:50]}...'")
    try:
        model = genai.GenerativeModel(config.GEMINI_MODEL_FOR_SUMMARY)
        prompt = f"ਕਿਰਪਾ ਕਰਕੇ ਹੇਠਾਂ ਦਿੱਤੀ ਪੰਜਾਬੀ ਖਬਰ ਦਾ 2-3 ਵਾਕਾਂ ਵਿੱਚ ਸਾਰਾਂਸ਼ ਦਿਓ:\n\n{article_text}"
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        logging.error(f"Gemini summary error: {e}")
        return f"LLM Summary Error: {e}"

def get_qna_answer(article_text, user_question):
    """Answers a user's question based on the article text using Gemini."""
    logging.info(f"Sending Q&A to Gemini. Question: '{user_question}'")
    try:
        model = genai.GenerativeModel(config.GEMINI_MODEL_FOR_QNA)
        prompt = f"""ਹੇਠਾਂ ਦਿੱਤੀ ਪੰਜਾਬੀ ਖਬਰ ਦੇ ਆਧਾਰ 'ਤੇ ਸਵਾਲ ਦਾ ਜਵਾਬ ਦਿਓ:

ਖਬਰ ਦਾ ਲੇਖ:
{article_text}

ਸਵਾਲ:
{user_question}

ਜਵਾਬ (ਪੰਜਾਬੀ ਵਿੱਚ):"""
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        logging.error(f"Gemini Q&A error: {e}")
        return f"LLM Q&A Error: {e}"